<?php
class CoreChild extends CoreClass {
	/**
	 * Constructor
	 */
	public function __construct() {
	}

	/**
	 * Initialize
	 * @return bool
	 */
	function __init() {
		return parent::__init(); // TODO: Change the autogenerated stub
	}


	/**
	 * Constructor
	 */
	function CoreClass() {
		parent::CoreClass(); // TODO: Change the autogenerated stub
	}

	/**
	 * Get singleton instance
	 * @return CoreClass
	 */
	function getInstance() {
		return parent::getInstance(); // TODO: Change the autogenerated stub
	}

	/**
	 * Apply module hook filters
	 * @param $name
	 * @param $data
	 * @return mixed
	 */
	function apply_filters($name, $data) {
		return parent::apply_filters($name, $data); // TODO: Change the autogenerated stub
	}

	/**
	 * Do module hook actions
	 * @param $name
	 * @return bool
	 */
	function do_action($name) {
		return parent::do_action($name); // TODO: Change the autogenerated stub
	}

	/**
	 * Add module hook action
	 * @param $name
	 * @param $action
	 * @return bool
	 */
	function add_action($name, $action) {
		return parent::add_action($name, $action); // TODO: Change the autogenerated stub
	}

	/**
	 * Add module hook filter
	 * @param $name
	 * @param $filter
	 * @return bool
	 */
	function add_filter($name, $filter) {
		return parent::add_filter($name, $filter); // TODO: Change the autogenerated stub
	}

	/**
	 * Add Ajax request
	 * @param $name
	 * @param $request
	 * @param bool $public
	 * @return bool
	 */
	function add_request($name, $request, $public = true) {
		return parent::add_request($name, $request, $public); // TODO: Change the autogenerated stub
	}

	/**
	 * Check if element already exists if exists it will be updated on Save else it will be inserted
	 * @param null $what
	 * @param bool $undelete
	 * @return bool
	 */
	function exists($what = NULL, $undelete = FALSE) {
		return parent::exists($what, $undelete); // TODO: Change the autogenerated stub
	}

	/**
	 * Prepare retrieve conditions
	 * @param null $what
	 * @param null $operators
	 * @return array
	 */
	function prepare($what = NULL, $operators = NULL) {
		return parent::prepare($what, $operators); // TODO: Change the autogenerated stub
	}


	/**
	 * Retrieve element
	 * @param null $what
	 * @param bool $encode
	 * @param null $onlyFields
	 * @param null $orderBy
	 * @param bool $returnAsArray
	 * @param null $operators
	 * @param bool $dump
	 * @return array|mixed
	 */
	function retrieve($what = NULL, $encode = false, $onlyFields = NULL, $orderBy = NULL, $returnAsArray = false, $operators = NULL, $dump = false) {
		return parent::retrieve($what, $encode, $onlyFields, $orderBy, $returnAsArray, $operators, $dump); // TODO: Change the autogenerated stub
	}

	/**
	 * Return an object of the table row UPPERCASE // Come Domenico comanda
	 * @param $what
	 * @param null $operators
	 * @return array
	 */
	function fetch($what, $operators = NULL) {
		return parent::fetch($what, $operators); // TODO: Change the autogenerated stub
	}

	/**
	 * Return an object of the table row
	 * @param $what
	 * @param null $operators
	 * @param null $case
	 * @return array
	 */
	function fetchValues($what, $operators = NULL, $case = null) {
		return parent::fetchValues($what, $operators, $case); // TODO: Change the autogenerated stub
	}

	/**
	 * Retrieve row values without check translations and relations
	 * @param $what
	 * @param null $operators
	 */
	function retrieveFields($what, $operators = NULL) {
		parent::retrieveFields($what, $operators); // TODO: Change the autogenerated stub
	}

	/**
	 * Retrieve element from POST request
	 * @param string $prefix
	 * @param bool $ajax_mode
	 * @return StdClass
	 */
	function retrieveByPost($prefix = '', $ajax_mode = true) {
		return parent::retrieveByPost($prefix, $ajax_mode); // TODO: Change the autogenerated stub
	}

	/**
	 * Save element
	 * @param null $overrydeID
	 * @param bool $return_query
	 * @return mixed|null|string
	 */
	function Save($overrydeID = NULL, $return_query = FALSE) {
		return parent::Save($overrydeID, $return_query); // TODO: Change the autogenerated stub
	}

	/**
	 * Generate unique ID uid-000000000000
	 * @param bool $default
	 * @param null $override
	 * @return string
	 */
	function uniqueID($default = false, $override = NULL) {
		return parent::uniqueID($default, $override); // TODO: Change the autogenerated stub
	}

	/**
	 * Delete element
	 * @param bool $logical
	 * @return bool
	 */
	function Delete($logical = false) {
		return parent::Delete($logical); // TODO: Change the autogenerated stub
	}

	/**
	 * Get list of elements
	 * @param null $orderby
	 * @param null $limitTo
	 * @param int $offset
	 * @param bool $testPermission
	 * @return array|mixed
	 */
	function getRecords($orderby = NULL, $limitTo = NULL, $offset = 0, $testPermission = true) {
		return parent::getRecords($orderby, $limitTo, $offset, $testPermission); // TODO: Change the autogenerated stub
	}

	/**
	 * Upgrade module
	 * @return bool|mixed|mysqli_result|PDOStatement
	 */
	function Upgrade() {
		return parent::Upgrade(); // TODO: Change the autogenerated stub
	}

	/**
	 * Initialization of table
	 * @param null $alter_columns
	 * @param null $action
	 * @return bool|mixed|mysqli_result|PDOStatement
	 */
	function Setup($alter_columns = NULL, $action = NULL) {
		return parent::Setup($alter_columns, $action); // TODO: Change the autogenerated stub
	}

	/**
	 *
	 */
	function SetupSupport() {
		parent::SetupSupport(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param string $flag
	 * @return $this
	 */
	function getFlagged($flag = 'deleted') {
		return parent::getFlagged($flag); // TODO: Change the autogenerated stub
	}

	/**
	 * @return array|mixed
	 */
	function retrieveByCommonOperations() {
		return parent::retrieveByCommonOperations(); // TODO: Change the autogenerated stub
	}


	/**
	 * @param null $filter
	 * @return $this
	 */
	function addRelationedConditions($filter = NULL) {
		return parent::addRelationedConditions($filter); // TODO: Change the autogenerated stub
	}

	/**
	 *
	 */
	function addTranslationConditions() {
		return parent::addTranslationConditions(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $query
	 * @param $encode
	 * @param null $onlyFields
	 * @param bool $returnAsArray
	 * @return array
	 */
	function execRetrieve($query, $encode, $onlyFields = NULL, $returnAsArray = FALSE) {
		return parent::execRetrieve($query, $encode, $onlyFields, $returnAsArray); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $field
	 * @param $db_value
	 * @param bool $mostData
	 * @return int|mixed|string
	 */
	function encodeValuesByFieldDefinitions($field, $db_value, $mostData = false) {
		return parent::encodeValuesByFieldDefinitions($field, $db_value, $mostData); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $data
	 * @param bool $withTime
	 * @param bool $withString
	 * @return mixed|string
	 */
	function toDisplayDate($data, $withTime = false, $withString = true) {
		return parent::toDisplayDate($data, $withTime, $withString); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $record
	 * @param $field
	 * @param $rel
	 * @return array|void
	 */
	function traslateSubFields($record, $field, $rel) {
		return parent::traslateSubFields($record, $field, $rel); // TODO: Change the autogenerated stub
	}


	/**
	 * @param $date
	 * @return bool|null|string
	 */
	function toDatabaseDate($date) {
		return parent::toDatabaseDate($date); // TODO: Change the autogenerated stub
	}

	/**
	 * @param null $where
	 */
	function addWhereCondition($where = NULL) {
		parent::addWhereCondition($where); // TODO: Change the autogenerated stub
	}

	/**
	 * @param null $instance
	 */
	function addJoinClause($instance = NULL) {
		return parent::addJoinClause($instance); // TODO: Change the autogenerated stub
	}

	/**
	 * @param null $orderBy
	 * @param null $limitTo
	 * @param int $offset
	 * @return array
	 */
	function getPublicRecords($orderBy = NULL, $limitTo = NULL, $offset = 0) {
		return parent::getPublicRecords($orderBy, $limitTo, $offset); // TODO: Change the autogenerated stub
	}

	/**
	 * @return string
	 */
	function getRequestHash() {
		return parent::getRequestHash(); // TODO: Change the autogenerated stub
	}

	/**
	 *
	 */
	function populateAllAndDeleted() {
		parent::populateAllAndDeleted(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param null $orderBy
	 * @param null $limit
	 * @param null $offset
	 * @param bool $testPermission
	 * @return array|mixed
	 */
	function populateDataSet($orderBy = NULL, $limit = NULL, $offset = NULL, $testPermission = TRUE) {
		return parent::populateDataSet($orderBy, $limit, $offset, $testPermission); // TODO: Change the autogenerated stub
	}

	/**
	 *
	 */
	function processRequestedParameters() {
		return parent::processRequestedParameters(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $parameters
	 * @param int $limit
	 * @param int $offset
	 * @param bool $testPermission
	 * @return array|mixed
	 */
	function populateDataSetAutoComplete($parameters, $limit = 15, $offset = 0, $testPermission = TRUE) {
		return parent::populateDataSetAutoComplete($parameters, $limit, $offset, $testPermission); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $array_where
	 * @param $hashField
	 * @return array
	 */
	function getAsArrayList($array_where, $hashField) {
		return parent::getAsArrayList($array_where, $hashField); // TODO: Change the autogenerated stub
	}

	/**
	 * @param bool $withEmpty
	 * @param $arrayKey
	 * @param $arrayValues
	 * @param $arrayOrderBy
	 * @param array $selected
	 * @param array $where
	 * @return string
	 */
	function createComboOptionsFromRecords($withEmpty = false, $arrayKey, $arrayValues, $arrayOrderBy, $selected = array(), $where = array()) {
		return parent::createComboOptionsFromRecords($withEmpty, $arrayKey, $arrayValues, $arrayOrderBy, $selected, $where); // TODO: Change the autogenerated stub
	}

	/**
	 * @param null $array_conditions
	 */
	function setQuery($array_conditions = NULL) {
		parent::setQuery($array_conditions); // TODO: Change the autogenerated stub
	}

	/**
	 * @param null $field
	 * @param null $operator
	 */
	function setWhereOperator($field = NULL, $operator = NULL) {
		parent::setWhereOperator($field, $operator); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $var
	 * @param $decode
	 * @return array|string
	 */
	function returnSessionVar($var, $decode) {
		return parent::returnSessionVar($var, $decode); // TODO: Change the autogenerated stub
	}

	/**
	 *
	 */
	function checkDeletedRecord() {
		parent::checkDeletedRecord(); // TODO: Change the autogenerated stub
	}

	/**
	 * Check if have customization
	 * @param $module
	 * @param $instance
	 */
	function checkCustomization($module, $instance) {
		parent::checkCustomization($module, $instance); // TODO: Change the autogenerated stub
	}

	/**
	 *
	 */
	function SetupTriggers() {
		parent::SetupTriggers(); // TODO: Change the autogenerated stub
	}

	/**
	 * On insert handler
	 * @param $prev
	 */
	function ___onInsertHandler($prev) {
		parent::___onInsertHandler($prev); // TODO: Change the autogenerated stub
	}

	/**
	 * On update handler
	 * @param $prev
	 */
	function ___onUpdateHandler($prev) {
		parent::___onUpdateHandler($prev); // TODO: Change the autogenerated stub
	}

	/**
	 * On save handler
	 * @param $prev
	 */
	function ___onSaveHandler($prev) {
		parent::___onSaveHandler($prev); // TODO: Change the autogenerated stub
	}

	/**
	 * On delete handler
	 * @param $prev
	 */
	function ___onDeleteHandler($prev) {
		parent::___onDeleteHandler($prev); // TODO: Change the autogenerated stub
	}


}
